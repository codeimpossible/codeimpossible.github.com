---
layout: post
status: publish
title: 'C# 5.0 wish list'
slug: C-5-0-wish-list
---
# C# 5.0 wish list
## I've been using C# as my primary programming language for about, oh 6 years now. I love it but I wouldn't say it's perfect. The C# language is lacking a lot of features that I've found to be huge productivity boosts in other languages.

<p>
	Let&#39;s get right to it. <strong>Extension Properties: </strong> This is first on this list because it was the first feature I thought of. Extension properties aren&#39;t something I&#39;m dying for but they would be a nice feature to have.</p>
<pre class="prettyprint">public static class StringExtensions 
{
    public static int LengthWithNoSpaces 
    {
        get 
        {
            return this.Replace(  &quot; &quot;, &quot;&quot; ).Length;
        }     
    }
}
</pre>
<p>
	<strong>Generics in Attributes: </strong> I&#39;m probably alone in wanting the ability to use generics in attribute classes but I can think of a few cases where this would make code more readable. e.g.</p>
<pre class="prettyprint">[ExpectedException&lt;InvalidOperationException&gt;()]</pre>
<p>
	<strong>Constructor Inheritance: </strong> I&#39;m still not sure why this isn&#39;t in c# already. I hate writing constructors that just pass arguments to base constructors.</p>
<pre class="prettyprint">public class A 
{
     private int number = 0;
     public A() 
     {
         number = 10;
     }
     public A(int num) 
     {
         number = num;
     }
}

public class B : A 
{
         
}

var test = new B(10); //this doesn&#39;t work!

// to get this to work you need to do:
public class C : A
{
    public C (int num) : base(num) {} // really?!?!?!
}
</pre>
<p>
	<strong>Nested inner classes ala Java: </strong> This is one syntax feature I really love about Java. I use this all the time when I work on Android applications. It just feels right to override virtual members inside inline object instantiations.</p>
<pre class="prettyprint">public class A
{
     public virtual void Test()
     {

     }
}

var ab = new A() {
    Test = () =&gt; MessageBox.Show(&quot;Test!&quot;);
};</pre>
<p>
	But why stop here, why not go all in with...</p>
<p>
	<strong>JavaScript-style handling of dynamics: </strong> (Yeah, I know this won&#39;t be happening soon if ever but I can dream, right?)</p>
<pre class="prettyprint">var x = new dynamic {
    Test = () =&gt; { return this.SomeNumber * 2; },
    SomeNumber = 11
};

// this would work as long as return type was still int
x.Test = () =&gt; { return 11; }; 

// this would fail
x.Test = () =&gt; { return &quot;hi&quot;; }; 
    
// y would == 11
var y = x[&quot;Test&quot;](); 
    
// able to add new properties like javascript
x[&quot;NewProp&quot;] = &quot;SomeValue&quot;; 
</pre>
<p>
	So that&#39;s <strong>my</strong> list (for now) of what I would like to see in vnext of C#, <em><span style="font-size: 18px;">what&#39;s on your wish list for C# 5.0?</span></em></p>
