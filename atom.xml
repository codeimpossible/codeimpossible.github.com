<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code: Impossible]]></title>
  <subtitle><![CDATA[Code makes anything possible]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://codeimpossible.com/"/>
  <updated>2016-01-30T04:50:11.000Z</updated>
  <id>http://codeimpossible.com/</id>
  
  <author>
    <name><![CDATA[Jared Barboza]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[hello world (again)]]></title>
    <link href="http://codeimpossible.com/2016/01/29/hello-world/"/>
    <id>http://codeimpossible.com/2016/01/29/hello-world/</id>
    <published>2016-01-30T03:14:46.000Z</published>
    <updated>2016-01-30T04:50:11.000Z</updated>
    <content type="html"><![CDATA[<p>I decided to start 2016 off a bit differently. Normally I’d write a recap post for 2015 listing all the things I didn’t do, and how I was going to <em>finally</em> do them <em>this</em> year. Because <em>this</em> year is totally different than all the others before it.</p>
<p><blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">today is the day!. Im going to go out and be productive!<br><br>jump cut<br>I&#39;m asleep on the couch. tv is very loud<br><br>🎶ILL BE THERRREE FOR YOUUU🎶</p>&mdash; Shenanigans.js (@codeimpossible) <a href="https://twitter.com/codeimpossible/status/693216746136666112" target="_blank" rel="external">January 29, 2016</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Right. So, new year, new way of doing things. First, the blog. It hasn’t gotten any love in pretty much a year, so I’m here kicking the dust off of it, fighting away all of the spiders and rodents that have nested in the past 12 months. New platform, it’s running on <a href="https://hexo.io/" target="_blank" rel="external">hexo</a> a static site generator that runs on node.</p>
<p>Why Node? Well, I got tired of dealing with the hassle of my jekyll powered blog, sure it ran, but everytime I wanted to go back to it I had to remember to install ruby, python, jekyll, pygments and I hadn’t used any of those in a super long time. So just getting my blog viewable on my laptop was a nightmare, never mind trying to get it to run on my desktop (which is windows based). Forget it.</p>
<p>As part of the transition, I decided to not port a lot of my older posts. This is mostly just because I’m too lazy to grind through the changes necessary to get the posts to work with the new blog platform. I moved over 2 of my most popular posts, if you’re looking for other posts, check out the <a href="https://github.com/codeimpossible/blog/tree/master/_archive" target="_blank" rel="external">git repo</a>.</p>
<p>If you’re suuuuper interested in having me move a post over for whatever reason then open an issue on github and I’ll do it.</p>
<p>So, new blog. What else?</p>
<p>Well we’re going to go back to this whole living healthy thing. It worked well in 2012 when I was on my way to getting married - I was at an all-time low of 235lbs. I’d like to get down there again. I’ve spent the last 2 years hovering around 270-280 and it’s not enjoyable. It’s that awkward part of being a big person where your lower half of your body is still holding out hope that the top half will go back to being thinner. It is awful and frustrating and I pretty much hate myself everyday.</p>
<p>More Writing. Yep. Twitter - and my own self-doubt - have ruined my writing ability. It’s time to get back into this and churn some stuff out that I can be happy with, and maybe (hopefully) write some stuff that other people find valuable too.</p>
<p>New year, new sheriff in town. Time will tell how well the new rule goes.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I decided to start 2016 off a bit differently. Normally I’d write a recap post for 2015 listing all the things I didn’t do, and how I was]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Trailing whitespace is evil. Don't commit evil into your repo.]]></title>
    <link href="http://codeimpossible.com/2012/04/02/trailing-whitespace-is-evil-don-t-commit-evil-into-your-repo/"/>
    <id>http://codeimpossible.com/2012/04/02/trailing-whitespace-is-evil-don-t-commit-evil-into-your-repo/</id>
    <published>2012-04-02T05:00:00.000Z</published>
    <updated>2016-01-30T02:11:03.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Lately_2C_I_u2019ve_beeen_working_on_a_lot_of_projects_with_different_people/languages/editors_2C_most_of_us_were_new_git_u2019ers_and_each_project_had_a_real_problem_with_trailing_whitespace"><a href="#Lately_2C_I_u2019ve_beeen_working_on_a_lot_of_projects_with_different_people/languages/editors_2C_most_of_us_were_new_git_u2019ers_and_each_project_had_a_real_problem_with_trailing_whitespace" class="headerlink" title="Lately, I’ve beeen working on a lot of projects with different people/languages/editors, most of us were new git’ers and each project had a real problem with trailing whitespace."></a>Lately, I’ve beeen working on a lot of projects with different people/languages/editors, most of us were new git’ers and each project had a real problem with trailing whitespace.</h3><p><strong>Fred and Tim</strong></p>
<p>It all starts out innocently enough. Fred, a mid-level developer at InfoTech Systems opens up his IM client and fires off a chat to a co-worker: “Hey Tim, can you check out my pull request? I’m done with the ratings feature and think we should merge it in”.</p>
<p>Tim, a Senior Software Developer, has been writing code since the mid 80’s. He originally started out contributing to the Gnome project and then bounced around the corporate world, Lotus, Microsoft, Oracle but now works with Fred at a small startup where they and five other developers are trying to build the next great cat-picture rating website - CatR.</p>
<p>“Ok, let me CR it”, CR is the teams short-hand for Code Review. Even though most of the team are experienced programmers every feature and bug fix commit must be reviewed by another developer.</p>
<p>Fred is the “new guy” on the team, this is his third day at InfoTech and he’s submitting his first feature enhancement. Even though Fred has 8 years of coding under his belt, he still gets a little nervous when someone reviews his code.</p>
<p>“Hmmmmm” Tim types back. <em>Ugh, This can’t be good</em> Fred thinks.</p>
<p>“This git diff looks weird. How many lines did you change in the main stylesheet?”</p>
<p>“Only 2 why?” Fred types back, starting to get a bit defensive. He takes a few quick, deep breaths and calms down.</p>
<p>“The diff is lighting up like a christmas tree. Check your diff locally.”</p>
<p>Fred opens up a terminal and does a quick check to see what Tim is talking about:</p>
<pre><code>git diff master product-ratings-feature
</code></pre><p><em>“Crap!”</em> the word jumps instantly into Freds mind. He can see immediately what Tims talking about. There a bunch of lines where the only thing different is the whitespace at the beginning or end of the line.</p>
<p>“Ugh, yeah I see it” Fred types back.</p>
<p>“Well, we can’t pull this in yet dude, we only want to have diffs show what we actually changed so if something goes south in the future we’re not scratching our heads looking at a all whitespace commit. Go back and check your whitespace settings, re-save and let me know when I can review it again.”</p>
<p>“Great, guess I’ve got some more work to do” Fred says to himself. He lets out a fairly audible sigh, opens up Visual Studio and starts typing away at the keyboard.</p>
<p><strong>The moral of the story</strong></p>
<p>Trailing whitespace issues can cause a lot of problems when they get into your repository. It leads to falsey diffs which claim lines have been changed when in fact the only thing that changed was spacing.</p>
<p>This can make finding what actually changed in a file later on in the development cycle next to impossible. Most open source project leads know this and a lot of them will reject pull requests that fail to trim whitespace (or have other</p>
<p>A lot of IDEs and text editors have options to configure trailing whitespace (SublimeText make this insanely easy) but Visual Studio, amazingly, has no option for this.</p>
<h2 id="How_to_Remove_Trailing_Whitespace_on_save_in_Visual_Studio"><a href="#How_to_Remove_Trailing_Whitespace_on_save_in_Visual_Studio" class="headerlink" title="How to Remove Trailing Whitespace on save in Visual Studio"></a>How to Remove Trailing Whitespace on save in Visual Studio</h2><ol>
<li>Open visual studio (yep)</li>
<li>In the menu select Tools -&gt; Macros -&gt; Macros IDE (yeah, we’re opening <strong>another</strong> IDE)</li>
<li>Expand “My Macros” in the Project Explorer (usually in the right-hand side of the window)</li>
<li>Double-Click the EnvironmentEvents module (yep, it’s VBA in all it’s glory)</li>
<li><p>Paste the code below just after the “Automatically generated code” region</p>
<pre><code>Private Sub DocumentEvents_DocumentSaved(ByVal document As EnvDTE.Document) _
    Handles DocumentEvents.DocumentSaved
    Dim fileName As String
    Dim result As vsFindResult

    Try
        &apos; Remove trailing whitespace
        result = DTE.Find.FindReplace( _
            vsFindAction.vsFindActionReplaceAll, _
            &quot;{:b}+$&quot;, _
            vsFindOptions.vsFindOptionsRegularExpression, _
            String.Empty, _
            vsFindTarget.vsFindTargetFiles, _
            document.FullName, _
            &quot;&quot;, _
            vsFindResultsLocation.vsFindResultsNone)

        If result = vsFindResult.vsFindResultReplaced Then
            &apos; Triggers DocumentEvents_DocumentSaved event again
            document.Save()
        End If
    Catch ex As Exception
        MsgBox(ex.Message, MsgBoxStyle.OkOnly, &quot;Trim White Space exception&quot;)
    End Try
End Sub
</code></pre></li>
</ol>
<p>Now save your new macro and whenever you save a file in Visual Studio this will run and trim all the trailing whitespace.</p>
<h2 id="How_to_Remove_trailing_whitespace_on_save_in_Sublime_Text_2"><a href="#How_to_Remove_trailing_whitespace_on_save_in_Sublime_Text_2" class="headerlink" title="How to Remove trailing whitespace on save in Sublime Text 2"></a>How to Remove trailing whitespace on save in Sublime Text 2</h2><ol>
<li>In Sublime Text, open up the preferences menu and select “File Settings - User”<ul>
<li>this is important because if you use the “Default” settings, they may be overwritten when you update Sublime Text to a new version.</li>
</ul>
</li>
<li>Scroll down until you see <code>&quot;trim_trailing_white_space_on_save&quot;</code>, set this option to <code>true</code></li>
<li>Save</li>
<li>Profit</li>
</ol>
<h2 id="Get_Git_to_help_you_out"><a href="#Get_Git_to_help_you_out" class="headerlink" title="Get Git to help you out"></a>Get Git to help you out</h2><p>In the example above Fred could have saved himself a lot of time if he ran one command:</p>
<pre><code>mv .git/hooks/pre-commit.sample .git/hooks/pre-commit
</code></pre><p>This file has a check (on the last line) that will fail any commit when there are whitespace errors. It’s not enabled by default so you have to remove the <code>.sample</code> from the file name to get git to run it.</p>
<h2 id="After_all_this_2C_what_should_I_do_next_3F"><a href="#After_all_this_2C_what_should_I_do_next_3F" class="headerlink" title="After all this, what should I do next?"></a>After all this, what should I do next?</h2><p>High-five Yourself!!!</p>
<p><img src="http://dl.dropbox.com/u/6291954/MnEIl.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Lately_2C_I_u2019ve_beeen_working_on_a_lot_of_projects_with_different_people/languages/editors_2C_most_of_us_were_new_git_u2019ers_a]]>
    </summary>
    
      <category term="best-practices" scheme="http://codeimpossible.com/tags/best-practices/"/>
    
      <category term="source-control" scheme="http://codeimpossible.com/tags/source-control/"/>
    
      <category term="development" scheme="http://codeimpossible.com/categories/development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Solving "$(document).ready is not a function" and other problems]]></title>
    <link href="http://codeimpossible.com/2010/01/13/solving-document-ready-is-not-a-function-and-other-problems/"/>
    <id>http://codeimpossible.com/2010/01/13/solving-document-ready-is-not-a-function-and-other-problems/</id>
    <published>2010-01-13T06:00:00.000Z</published>
    <updated>2016-01-30T02:10:32.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Ever_been_working_on_a_customer_u2019s_site_2C_writing_some_really_awesome_jQuery_2C_you_deploy_it_2C_and_everything_is_awesome-_And_then_you_get_an_email_one_day_u2026"><a href="#Ever_been_working_on_a_customer_u2019s_site_2C_writing_some_really_awesome_jQuery_2C_you_deploy_it_2C_and_everything_is_awesome-_And_then_you_get_an_email_one_day_u2026" class="headerlink" title="Ever been working on a customer’s site, writing some really awesome jQuery, you deploy it, and everything is awesome. And then you get an email one day…"></a>Ever been working on a customer’s site, writing some really awesome jQuery, you deploy it, and everything is awesome. And then you get an email one day…</h3><p>Has this ever happened to you: you’ve been working on a customer’s site, writing some really awesome jQuery flashy, fadey, scrolly, interactivey thing, you deploy it, and everything is awesome. The customer rejoices and the customer’s customers rejoice. Rejoicing is had by everyone. And then you get an email one day:</p>
<blockquote>
<p>“Everything is broken. We’ve kidnapped your dog. Fix our site or you’ll never see Spartacus again.”</p>
</blockquote>
<p>And before you have time to wonder why you ever named your dog “Spartacus” to begin with (i mean <strong>come. on.</strong>), you’re off in debug hell.</p>
<p>You load the site and see all sorts of weird errors: <code>&quot;$().ready is not a function&quot;</code> <code>&quot;$(document) doesn&#39;t support this property or method&quot;</code> Or my personal favorite: <code>&quot;null is null or not an object&quot;</code></p>
<p>You open up FireFox, activate FireBug, load the console, and type <code>alert($)</code>, press run, and instead of seeing the expected jQuery function:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">E, F</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> (o.fn.init)(E, F);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You instead get:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, elements = [], length = <span class="built_in">arguments</span>.length; i &lt; length; i++) &#123;</span><br><span class="line">            elements.push($(<span class="built_in">arguments</span>[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elements;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.isString(element)) &#123;</span><br><span class="line">        element = <span class="built_in">document</span>.getElementById(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Element.extend(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Or even:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>DOH!</strong> Looks like another javascript library has been loaded and has overwritten the <code>$()</code> shortcut for jQuery. Woe is I. Why can’t we all just get along?!? Well, we can’t stop people from including their favorite javascript libraries, but what we can do is prevent our code from suffering as a result. We’ll need a nice, big beefy, bodyguard to make sure our code isn’t messed with while it’s out clubbing with Prototype, Scriptaculous or even MooTools (who invited <em>him</em>??!?). Here’s what our bodyguard function will look like</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125; ) ( jQuery );</span><br></pre></td></tr></table></figure>
<p>So what this does is call our anonymous function and pass the <code>jQuery</code> object. This will scope <code>$</code> our little function so we won’t step on anyone else’s toes (and they won’t bump into us while we’re on the dance floor and spill our drink everywhere). Okay, I think I&#39;ve taken the clubbing metaphor far enough.</p>
<p>Basically this will allow our code to run and use the <code>$</code> shortcut for JQuery as if it were loaded without any of these other libraries on the page. Here is what the completed code would look like:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/jquery/1.4.1/jquery.min.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/prototype/1.6.1.0/prototype.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://ajax.googleapis.com/ajax/libs/scriptaculous/1.8.3/scriptaculous.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// we can now rely on $ within the safety of our "bodyguard" function</span></span><br><span class="line">    $(<span class="built_in">document</span>).ready( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">"nyah nyah! I'm able to use '$'!!!!"</span>);  &#125; );</span><br><span class="line">&#125; ) ( jQuery );</span><br><span class="line"></span><br><span class="line"><span class="comment">//this will fail</span></span><br><span class="line">$(<span class="built_in">document</span>).ready( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">'fail?'</span>); &#125; );</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>I love using this simple self-calling anonymous function style when working with jQuery because it saves me from typing <code>jQuery()</code>, which really does look a lot more ugly than using the <code>$()</code> shortcut. It also protects my code from any scoping issues and lets the code function normally when <a href="http://docs.jquery.com/Core/jQuery.noConflict" target="_blank" rel="external">jQuery is put into no conflict mode</a>.</p>
<p>My opinion, if you’re doing work in jQuery on sites that you don’t control 100%, you should be using this method to protect your code and your clients.</p>
<p><strong>Updated: changed link for jquery to use 1.4.1 at the google CDN (tsk, tsk, tsk I was using the googlecode.com link)</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Ever_been_working_on_a_customer_u2019s_site_2C_writing_some_really_awesome_jQuery_2C_you_deploy_it_2C_and_everything_is_awesome-_And]]>
    </summary>
    
      <category term="javascript" scheme="http://codeimpossible.com/tags/javascript/"/>
    
      <category term="jquery" scheme="http://codeimpossible.com/tags/jquery/"/>
    
      <category term="development" scheme="http://codeimpossible.com/categories/development/"/>
    
  </entry>
  
</feed>
